scalar DateTime

type Query {
	services(skip: Int, take: Int, where: WhereInput): [Service]!
	service(id: ID!): Service
	appointments(
		skip: Int
		take: Int
		where: AppointmentWhereInput
	): [Appointment]!
	appointment(id: ID!): Appointment
}

type Mutation {
	createService(data: ServiceCreateInput!): Service!
	updateService(id: ID!, data: ServiceUpdateInput!): Service!
	createAppointment(data: AppointmentCreateInput!): Appointment!
	updateAppointment(id: ID!, data: AppointmentUpdateInput!): Appointment!
}

interface BaseModel {
	id: ID!
	createdAt: DateTime!
	updatedAt: DateTime
}

# Global Filters

input WhereInput {
	name: StringFilterInput
	price: Float
}

input StringFilterInput {
	equals: String
	in: [String]
	notIn: [String]
	lt: String
	lte: String
	gt: String
	gte: String
	contains: String
	startsWith: String
	endsWith: String
	not: String
}

input IdFilterInput {
	equals: ID!
}

input DateFilterInput {
	equals: DateTime!
}

# Services
enum SERVICE {
	HAIRCUT
	BEARD
}

type Service implements BaseModel {
	id: ID!
	createdAt: DateTime!
	updatedAt: DateTime

	name: SERVICE!
	price: Int!
}

input ServiceCreateInput {
	name: String!
	price: Int!
}

input ServiceUpdateInput {
	name: String
	price: Int
}

# Appointments
enum APPOINTMENT_STATE {
	CANCELED
	SCHEDULED
	DONE
}

type Appointment implements BaseModel {
	id: ID!

	customerId: ID
	barberId: ID
	serviceId: ID

	appointmentDate: DateTime!
	state: APPOINTMENT_STATE!

	createdAt: DateTime!
	updatedAt: DateTime
}

input AppointmentCreateInput {
	customerId: ID!
	barberId: ID!
	serviceId: ID!
	appointmentDate: DateTime!
	state: APPOINTMENT_STATE!
}

input AppointmentUpdateInput {
	customerId: ID
	barberId: ID
	serviceId: ID
	appointmentDate: DateTime
	state: APPOINTMENT_STATE
}

input AppointmentWhereInput {
	customerId: IdFilterInput
	barberId: IdFilterInput
	serviceId: IdFilterInput
	state: StringFilterInput
	appointmentDate: DateFilterInput
}
